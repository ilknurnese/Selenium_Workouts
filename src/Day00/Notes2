Selenium is a widely adopted open-source automation testing framework
that is designed to help users test web applications across various browsers and platforms.
Selenium is not just a single tool but a set of tools that helps testers to automate web-based applications more efficiently.

Components of Selenium

Selenium IDE −
Selenium Integrated Development Environment (IDE) is a Firefox plugin
that lets testers to record their actions as they follow the workflow that they need to test.
It allows users to create test scripts without having to write codes manually.
Although it offers a quick start, Selenium IDE is not usually recommended for testing complex scenarios.

Selenium RC −
Selenium Remote Control (RC) was the flagship testing framework
that allowed more than simple browser actions and linear execution.
It can help you use the full power of programming languages such as Java, C#, PHP, Python, Ruby and PERL to create more complex tests.

Selenium WebDriver −
Selenium WebDriver is the successor to Selenium RC which sends commands directly to the browser and retrieves results.
WebDriver is meant for automating browser interactions.
It provides a simple API for controlling the browsers and help users interact with web elements.

Selenium Grid −
Selenium Grid is meant for executing parallel tests across multiple machines.
Due to the distribution of test execution across different environments, it can greatly minimize the testing time.


Key Features of Selenium
Here are some of the prominent features of Selenium that makes it so popular among testers and developers a like −

Cross-browser Compatibility −
    You can use Selenium to execute tests on different browsers including Chrome, Firefox, Safari, and Internet Explorer.
    This ensures that your web application performs consistently across multiple platforms.
Platform Independence −
    Selenium is not bound to any specific operating system. It can run on Windows, macOS, and Linux.
    Due to this platform independence, Selenium is the preferred choice for testing diverse applications.
Support for Multiple Programming Languages −
    Selenium supports multiple programming languages including Java, Python, C#, Ruby, and JavaScript.
    This flexibility allows testers and developers to choose a language they are comfortable with.
Extensibility −
    Selenium has features to enable users to incorporate additional functionalities through several plugins or extensions.
    One can easily customize Selenium to suit specific testing requirements.




How to Setup Selenium with Java?

Step 1 − Download and install Java from the link Java Downloads.

Once we have successfully installed Java, we can confirm its installation by running the command: java, from the command prompt.

C:\java

Step 2 − Next, we would Confirm the version of the Java installed by running the command: java –version.

java –version

It will show the following output −

openjdk version "17.0.9" 2023-10-17
OpenJDK Runtime Environment Homebrew (build 17.0.9+0)
OpenJDK 64-Bit Server VM Homebrew (build 17.0.9+0, mixed mode, sharing)

Step 3 − Install Maven in our system using the link Downloading Apache Maven.
https://maven.apache.org/download.cgi

Next, we would confirm the version of the Maven installed by running the following command −

Confirm the version of the Maven installed by running the command: mvn –version.

mvn –version.
It will show the following output −

Apache Maven 3.9.6 (bc0240f3c744dd6b6ec2920b3cd08dcc295161ae)
Maven home: /opt/homebrew/Cellar/maven/3.9.6/libexec
Java version: 21.0.1, vendor: Homebrew, runtime: /opt/homebrew/Cellar/openjdk/21.0.1/libexec/openjdk.jdk/Contents/Home
Default locale: en_IN, platform encoding: UTF-8
OS name: "mac os x", version: "14.0", arch: "aarch64", family: "mac"
The output of the command executed signified that the Maven version installed in the system is Apache Maven 3.9.6.

Step 4 − Install a code editor called the IntelliJ to write and run the Selenium test.

Step 5 − Add the below code in the Main.java file.

package org.example;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import java.util.concurrent.TimeUnit;

public class Main {
   public static void main(String[] args) throws InterruptedException {

      // Initiate the Webdriver
      WebDriver driver = new ChromeDriver();

      // adding implicit wait of 12 secs
      driver.manage().timeouts().implicitlyWait(12, TimeUnit.SECONDS);

      // URL launch
      driver.get("https://www.tutorialspoint.com/selenium/practice/resizable.php");

      // get browser title after browser launch
      System.out.println("Browser title: " + driver.getTitle());
   }
}

Overall dependencies added in the pom.xml file −

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
   http://maven.apache.org/xsd/maven-4.0.0.xsd">

   <modelVersion>4.0.0</modelVersion>
   <groupId>org.example</groupId>
   <artifactId>SeleniumJava</artifactId>
   <version>1.0-SNAPSHOT</version>

   <properties>
      <maven.compiler.source>16</maven.compiler.source>
      <maven.compiler.target>16</maven.compiler.target>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
   </properties>

   <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
   <dependencies>
      <dependency>
         <groupId>org.seleniumhq.selenium</groupId>
         <artifactId>selenium-java</artifactId>
         <version>4.19.0</version>
      </dependency>
   </dependencies>
</project>

Step 6 − Right click and select Run ‘Main.main()’ option. Wait till the run is completed.

Step 7 − Chrome browser should be launched,
the output in console with the message should be - Browser Title: Selenium Practice - Resizeable.

Finally, the message Process finished with exit code 0 was received, signifying successful execution of the code.

Along with that Chrome browser got launched with the message Chrome is being controlled by automated test software at the top.